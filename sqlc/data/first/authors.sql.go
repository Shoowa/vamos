// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: authors.sql

package first

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAuthor = `-- name: CreateAuthor :execresult
INSERT INTO authors (name, bio) VALUES ($1, $2)
`

type CreateAuthorParams struct {
	Name string      `json:"name"`
	Bio  pgtype.Text `json:"bio"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createAuthor, arg.Name, arg.Bio)
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio FROM authors WHERE name = $1 LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, name string) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthor, name)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio FROM authors ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.Query(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const mostProductiveAuthor = `-- name: MostProductiveAuthor :one
SELECT authors.name
FROM authors
JOIN books ON books.authorID = authors.id
WHERE books.wordcount = (SELECT MAX(books.wordcount) FROM books)
`

func (q *Queries) MostProductiveAuthor(ctx context.Context) (string, error) {
	row := q.db.QueryRow(ctx, mostProductiveAuthor)
	var name string
	err := row.Scan(&name)
	return name, err
}

const mostProductiveAuthorAndBook = `-- name: MostProductiveAuthorAndBook :one
SELECT authors.id, authors.name, authors.bio, books.id, books.authorid, books.title, books.edition, books.volume, books.year, books.wordcount
FROM authors
JOIN books ON books.authorID = authors.id
WHERE books.wordcount = (SELECT MAX(books.wordcount) FROM books)
`

type MostProductiveAuthorAndBookRow struct {
	Author Author `json:"author"`
	Book   Book   `json:"book"`
}

func (q *Queries) MostProductiveAuthorAndBook(ctx context.Context) (MostProductiveAuthorAndBookRow, error) {
	row := q.db.QueryRow(ctx, mostProductiveAuthorAndBook)
	var i MostProductiveAuthorAndBookRow
	err := row.Scan(
		&i.Author.ID,
		&i.Author.Name,
		&i.Author.Bio,
		&i.Book.ID,
		&i.Book.Authorid,
		&i.Book.Title,
		&i.Book.Edition,
		&i.Book.Volume,
		&i.Book.Year,
		&i.Book.Wordcount,
	)
	return i, err
}
