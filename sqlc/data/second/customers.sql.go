// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customers.sql

package second

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :execresult
INSERT INTO customers (forename, surname, dob, male) VALUES ($1, $2, $3, $4)
`

type CreateCustomerParams struct {
	Forename string      `json:"forename"`
	Surname  string      `json:"surname"`
	Dob      pgtype.Date `json:"dob"`
	Male     pgtype.Bool `json:"male"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createCustomer,
		arg.Forename,
		arg.Surname,
		arg.Dob,
		arg.Male,
	)
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, forename, surname, dob, male FROM customers WHERE forename = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, forename string) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, forename)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Forename,
		&i.Surname,
		&i.Dob,
		&i.Male,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, forename, surname, dob, male FROM customers ORDER BY forename
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Forename,
			&i.Surname,
			&i.Dob,
			&i.Male,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
